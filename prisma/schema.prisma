generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Branch {
  id       Int          @id @default(autoincrement())
  name     String
  region   String
  district String
  address  String
  phone    String
  status   BranchStatus

  rooms            Room[]
  users            User[]
  courseCategories CourseCategory[]
  courses          Course[]
  groups           Group[]
  students         Student[]
  studentGroups    StudentGroup[]
  teachers         Teacher[]
}

model Room {
  id        Int    @id @default(autoincrement())
  branch_id Int
  name      String
  capacity  Int

  branch Branch  @relation(fields: [branch_id], references: [id])
  groups Group[]
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  phone     String
  password  String
  photo     String?  @default("photo.jpg")
  role      UserRole
  branch_id Int

  branch Branch @relation(fields: [branch_id], references: [id])
}

model CourseCategory {
  id        Int    @id @default(autoincrement())
  name      String
  branch_id Int

  branch  Branch   @relation(fields: [branch_id], references: [id])
  courses Course[]
}

model Course {
  id              Int     @id @default(autoincrement())
  branch_id       Int
  category_id     Int
  name            String
  status          String
  price           Float
  course_photo    String? @default("photo.jpg")
  duration_hours  Int
  duration_months Int
  description     String

  branch   Branch         @relation(fields: [branch_id], references: [id])
  category CourseCategory @relation(fields: [category_id], references: [id])
  groups   Group[]
}

model Group {
  id         Int      @id @default(autoincrement())
  name       String
  course_id  Int
  room_id    Int
  teacher_id Int
  status     String
  days       String[]
  start_time DateTime
  start_date DateTime
  end_date   DateTime
  branch_id  Int

  branch        Branch         @relation(fields: [branch_id], references: [id])
  course        Course         @relation(fields: [course_id], references: [id])
  room          Room           @relation(fields: [room_id], references: [id])
  teacher       Teacher        @relation(fields: [teacher_id], references: [id])
  studentGroups StudentGroup[]
}

model Student {
  id             String   @id @default(uuid())
  fullname       String
  email          String   @unique
  password       String
  phone          String
  gander         Gender
  student_photo  String?  @default("photo.jpg")
  birthday       DateTime
  status         String
  other_detailes Json
  branch_id      Int

  branch        Branch         @relation(fields: [branch_id], references: [id])
  studentGroups StudentGroup[]
}

model StudentGroup {
  id         Int    @id @default(autoincrement())
  group_id   Int
  student_id String
  branch_id  Int

  group   Group   @relation(fields: [group_id], references: [id])
  student Student @relation(fields: [student_id], references: [id])
  branch  Branch  @relation(fields: [branch_id], references: [id])
}

model Teacher {
  id            Int      @id @default(autoincrement())
  phone         String
  email         String   @unique
  fullname      String
  gender        Gender
  teacher_photo String   @default("photo.jpg")
  birthday      DateTime
  password      String
  branch_id     Int
  coin          Int
  status        String
  description   String

  branch Branch  @relation(fields: [branch_id], references: [id])
  groups Group[]
}

model Moliya {
  id           String @id @default(uuid())
  invoice      String
  All_Kirim    BigInt
  All_Chiqim   BigInt
  foyda        BigInt
  using_budjet Float
  supllier     String
  summa        BigInt
  status       String
}

model Hisobotlar {
  id    String   @id @default(uuid())
  data  DateTime
  month String
  summa Int
}

enum BranchStatus {
  ACTIVE
  INACTIVE
}

enum UserRole {
  ADMIN
  TEACHER
  STUDENT
}

enum Gender {
  MALE
  FEMALE
}
